/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "hot-update/hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "hot-update/hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "5f6484b1ee9e28a21bea";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted
/******/ 			)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "src/pm/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./src/pm/index.js")(__webpack_require__.s = "./src/pm/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/pm/PM.js":
/*!**********************!*\
  !*** ./src/pm/PM.js ***!
  \**********************/
/*! exports provided: PM, Hron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PM\", function() { return PM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hron\", function() { return Hron; });\n/* harmony import */ var _PMMat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PMMat.js */ \"./src/pm/PMMat.js\");\n/* harmony import */ var _PMFilt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PMFilt.js */ \"./src/pm/PMFilt.js\");\n/* harmony import */ var _PMIz_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PMIz.js */ \"./src/pm/PMIz.js\");\n/* harmony import */ var _PMTexture_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PMTexture.js */ \"./src/pm/PMTexture.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\nfunction PM(visi3D, objbase) {\n  this.type = \"PM\";\n  var self = this;\n  this.objbase = objbase;\n  this.visi3D = visi3D;\n  this.plus = \"?1\"; //+Math.random()\n\n  this.loaderGLTF = new THREE.GLTFLoader();\n  this.tex = new _PMTexture_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, visi3D, objbase);\n  this.mat = new _PMMat_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, visi3D, objbase);\n  this.filt = new _PMFilt_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, visi3D, objbase);\n  this.iz = new _PMIz_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this, visi3D, objbase);\n  this.arrayHron = [];\n\n  this.getId = function (idObj, fun, bClaen) {\n    if (bClaen == true) {\n      //Стартуем занново\n      for (var i = 0; i < this.arrayHron.length; i++) {\n        if (this.arrayHron[i].testId(idObj) == true) {\n          this.arrayHron.splice(i, 1);\n        }\n      }\n    }\n\n    for (var i = 0; i < this.arrayHron.length; i++) {\n      if (this.arrayHron[i].testId(idObj) == true) {\n        this.arrayHron[i].setFun(fun);\n        return;\n      }\n    }\n\n    this.arrayHron.push(new Hron(this, idObj, fun));\n  }; //глобально очищает все бд\n\n\n  this.clear = function () {};\n}\nfunction Hron(par, idObj, fun) {\n  this.type = \"Hron\";\n  var self = this;\n  this.par = par;\n  this.idObj = idObj;\n  this.id = undefined;\n  this.object = undefined;\n  this.link = undefined;\n  this.filt = undefined;\n  this.content3d = undefined;\n  this.array = [];\n  this.array.push(fun);\n  this.boolClone = true;\n  var cc;\n\n  this.setFun = function (fun) {\n    if (this.content3d != undefined) {\n      if (self.boolClone == true) {\n        cc = self.content3d.clone();\n      } else {\n        cc = self.content3d;\n      }\n\n      cc.hron = this;\n      this.par.iz.setHron(this, cc);\n      if (this.object.param) this.par.filt.dragParam(cc, this.object.param);\n      fun(cc);\n      return;\n    }\n\n    this.array.push(fun);\n  };\n\n  this.finalLoad = function (o3d) {\n    this.getObj3D(o3d);\n    this.content3d = o3d;\n    o3d.name = \"hron_\" + this.id;\n    this.par.mat.setObjS(this.content3d, this.object, this.finalLoad1);\n  };\n\n  this.finalLoad1 = function () {\n    self.par.filt.setObjS(self, self.finalLoad2);\n  };\n\n  this.finalLoad2 = function () {\n    for (var i = 0; i < self.array.length; i++) {\n      if (self.boolClone == true) {\n        cc = self.content3d.clone();\n      } else {\n        cc = self.content3d;\n      }\n\n      cc.hron = self;\n      self.par.iz.setHron(self, cc);\n      if (self.object.param) self.par.filt.dragParam(cc, self.object.param);\n      self.array[i](cc);\n    }\n  };\n\n  this.start = function (o) {\n    this.object = o;\n    if (this.object.param.clone != undefined) if (this.object.param.clone == false) this.boolClone = false;\n    this.id = o.id;\n    this.link = \"resources/data/\" + this.id + \"/mod/\" + this.object.mod.name;\n\n    if (this.object.mod.name == \"n\") {\n      //Debag\n      this.finalLoad(new THREE.Mesh(new THREE.BoxBufferGeometry(100, 100, 100)));\n    } else {\n      this.par.loaderGLTF.load(this.link, function (object) {\n        self.finalLoad(object.scene);\n      });\n    }\n  };\n\n  var xid, xxid;\n\n  this.testId = function (_idObj) {\n    if (typeof _idObj == \"number\") xxid = _idObj;else xxid = _idObj.id;\n\n    if (this.id == undefined) {\n      xid = this.idObj.id;\n    } else {\n      xid = this.id;\n    }\n\n    if (xid == xxid) return true;\n    return false;\n  };\n\n  this.getObj3D = function (o3d) {\n    if (o3d.material != undefined) {\n      if (o3d.material.roughnessMap != undefined) {\n        o3d.material.envMap = par.visi3D.cubeMap.getTexture();\n      }\n    }\n\n    if (o3d == undefined) return;\n\n    if (o3d.children != undefined) {\n      for (var i = o3d.children.length - 1; i >= 0; i--) {\n        this.getObj3D(o3d.children[i]);\n      }\n    }\n\n    if (o3d.name == \"Default_light\") {\n      o3d.parent.remove(o3d);\n    } //return o;\n\n  };\n\n  if (_typeof(idObj) == \"object\") {\n    //обект загружен и его можно сразу стортонуть\n    this.start(idObj);\n    return;\n  }\n\n  if (typeof idObj == \"number\") {\n    $.ajax({\n      url: \"resources/data/\" + idObj + \"/config.json\" + self.par.plus,\n      success: function function_name(data) {\n        if (typeof data === \"string\") {\n          self.start(JSON.parse(data));\n        } else self.start(data);\n      },\n      error: function function_name(data) {\n        console.log(\"Что то случилось с конфигом\");\n      }\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pm/PM.js\n");

/***/ }),

/***/ "./src/pm/PMFilt.js":
/*!**************************!*\
  !*** ./src/pm/PMFilt.js ***!
  \**************************/
/*! exports provided: default, StartFilt, PMMaterial, PMMark, PMText, CeshGeom, LoadTime, SliteGeom, SGHron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PMFilt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StartFilt\", function() { return StartFilt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PMMaterial\", function() { return PMMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PMMark\", function() { return PMMark; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PMText\", function() { return PMText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CeshGeom\", function() { return CeshGeom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoadTime\", function() { return LoadTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SliteGeom\", function() { return SliteGeom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SGHron\", function() { return SGHron; });\n/* harmony import */ var _instance_MeshCombined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instance/MeshCombined.js */ \"./src/pm/instance/MeshCombined.js\");\n\nfunction PMFilt(par, visi3D, objbase) {\n  this.type = \"PMFilt\";\n  var self = this;\n  this.par = par;\n  this.visi3D = visi3D;\n  this.objbase = objbase; //this.pmText=new PMText(this, visi3D);\n\n  this.ceshGeom = new CeshGeom(this);\n  var b;\n\n  this.setObjS = function (hron, fun) {\n    b = true;\n    if (hron.object.filt) if (hron.object.filt.length != 0) {\n      new StartFilt(this, hron, fun);\n      return;\n    } //if(hron.object.\n\n    /*if(hron.object.iz){\r\n    \tthis.par.iz.setHron(hron, null)//.content3d,hron.object.iz)\r\n    }*/\n\n    this.finalObjS(hron, fun);\n  };\n\n  this.finalObjS = function (hron, fun) {\n    //self.dragPozition(hron)\n    if (hron.object.param) {\n      //self.dragParam(hron.content3d, hron.object.param) \t\n      if (hron.object.param.kesh == true) self.ceshGeom.set(hron.content3d);\n      if (hron.object.param.sG != undefined) if (hron.object.param.sG == true) self.ceshGeom.groupGeometri(hron.content3d);\n    }\n\n    fun();\n  };\n\n  this.dragParam = function (c3d, obj) {\n    if (c3d.children) {\n      for (var i = c3d.children.length - 1; i >= 0; i--) {\n        this.dragParam(c3d.children[i], obj);\n      }\n    }\n\n    if (c3d.bs == undefined) {\n      c3d.castShadow = obj.tOt;\n      c3d.receiveShadow = obj.tNa;\n    }\n\n    var b = obj.rO;\n    if (c3d.iz) if (c3d.iz.renderOrder) b = c3d.iz.renderOrder;\n    c3d.renderOrder = b;\n  };\n\n  this.dragPozition = function (hron) {\n    var b = false;\n\n    if (hron.object) {\n      if (hron.object.psm) {\n        b = true;\n        if (hron.object.psm.active != undefined) if (hron.object.psm.active == false) b = false;\n      }\n    }\n\n    if (b == true) {\n      hron.content3d.position.set(hron.object.psm.p[0], hron.object.psm.p[1], hron.object.psm.p[2]);\n      hron.content3d.rotation.set(hron.object.psm.r[0], hron.object.psm.r[1], hron.object.psm.r[2]);\n      hron.content3d.scale.set(hron.object.psm.s[0], hron.object.psm.s[1], hron.object.psm.s[2]);\n    } else {\n      hron.content3d.position.set(0, 0, 0);\n      hron.content3d.rotation.set(0, 0, 0);\n      hron.content3d.scale.set(1, 1, 1);\n    }\n  };\n}\nfunction StartFilt(par, hron, fun) {\n  this.type = \"StartFilt\";\n  var self = this;\n  this.par = par;\n  this.hron = hron;\n  this.fun = fun;\n  this.hron.filt = this;\n  this.array = [];\n  var sahF = 0;\n  var type;\n\n  this.dragFilt = function () {\n    if (sahF == this.hron.object.filt.length) {\n      this.par.finalObjS(this.hron, this.fun);\n      return;\n    }\n\n    type = this.hron.object.filt[sahF].type;\n    sahF++;\n    if (type == \"mark\") this.array.push(new PMMark(this, this.hron.object.filt[sahF - 1], this.array.length));\n    if (type == \"material\") this.array.push(new PMMaterial(this, this.hron.object.filt[sahF - 1], this.array.length));\n  };\n\n  this.dragFilt();\n}\nfunction PMMaterial(par, obj, idArr) {\n  this.type = \"PMMaterial\";\n  var self = this;\n  this.par = par;\n  this.obj = obj;\n  this.idArr = idArr;\n  this.mat = this.par.par.par.mat.getTestTitle(obj.id);\n\n  if (this.mat == null) {\n    this.par.dragFilt();\n    return;\n  }\n\n  this.parsing = function (c3d) {\n    if (c3d.children) {\n      for (var i = c3d.children.length - 1; i >= 0; i--) {\n        this.parsing(c3d.children[i]);\n      }\n    }\n\n    if (c3d.material != undefined) {\n      c3d.material = this.mat;\n    }\n  };\n\n  this.parsing(par.hron.content3d);\n  this.par.dragFilt();\n}\nfunction PMMark(par, obj, idArr) {\n  this.type = \"PMMark\";\n  var self = this;\n  this.par = par;\n  this.obj = obj;\n  this.idArr = idArr;\n  this.idKey = obj.id;\n  this.c3d = par.hron.content3d;\n  this.arrName = [];\n  this.arrayObj = [];\n\n  if (this.idKey == \"null\") {\n    this.par.dragFilt();\n    return;\n  }\n\n  var bbbb = true;\n\n  if (obj.id.indexOf(\"|\") != -1) {\n    var aa = obj.id.split(\"|\");\n    var aa1 = aa[0].split(\",\");\n    var aa2 = aa[1].split(\",\");\n\n    for (var i = 0; i < aa1.length; i++) {\n      this.arrName[i] = {\n        name: aa1[i],\n        id: aa2[i] * 1,\n        obCont: null\n      };\n    }\n\n    bbbb = false;\n  } else {\n    bbbb = true;\n    this.arrName[0] = {\n      name: \"null\",\n      id: obj.id,\n      obCont: null\n    };\n  }\n\n  var old, nnn;\n\n  this.parsing = function (c3d) {\n    if (c3d.children) {\n      for (var i = c3d.children.length - 1; i >= 0; i--) {\n        this.parsing(c3d.children[i]);\n      }\n    }\n\n    if (c3d.type == \"Mesh\") {\n      if (bbbb) {\n        nnn = this.arrName[0].obCont.clone();\n        c3d.parent.add(nnn);\n        nnn.position.set(c3d.position.x, c3d.position.y, c3d.position.z);\n        nnn.rotation.set(c3d.rotation.x, c3d.rotation.y, c3d.rotation.z);\n        nnn.scale.set(c3d.scale.x, c3d.scale.y, c3d.scale.z);\n        c3d.parent.remove(c3d);\n      } else {\n        if (c3d.name) {\n          for (var i = this.arrName.length - 1; i >= 0; i--) {\n            if (c3d.name.indexOf(this.arrName[i].name) != -1) {\n              nnn = this.arrName[i].obCont.clone();\n              c3d.parent.add(nnn); //if(c3d.name.indexOf(\"Treexz\")==-1)c3d.parent.add(nnn)\n\n              nnn.position.set(c3d.position.x, c3d.position.y, c3d.position.z);\n              nnn.rotation.set(c3d.rotation.x, c3d.rotation.y, c3d.rotation.z);\n              nnn.scale.set(c3d.scale.x, c3d.scale.y, c3d.scale.z);\n              c3d.parent.remove(c3d);\n              return;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  this.loadMMM = function (o) {\n    this.par.par.par.getId(o.id * 1, function (c3d) {\n      o.obCont = c3d;\n      self.loadMod();\n    });\n  };\n\n  this.loadMod = function () {\n    for (var i = 0; i < this.arrName.length; i++) {\n      if (this.arrName[i].obCont == null) {\n        this.loadMMM(this.arrName[i]);\n        return;\n      }\n    }\n\n    this.parsing(this.c3d);\n    this.par.dragFilt();\n  };\n\n  this.loadMod();\n}\nfunction PMText(par, visi3D) {\n  this.type = \"PMText\";\n  var self = this;\n  this.par = par;\n  this.visi3D = visi3D;\n  this.cont3d = undefined;\n  this.array = undefined;\n  var kol = 0;\n\n  this.setHron = function (hron) {\n    this.cont3d = hron.content3d;\n    this.array = hron.object.fT.array;\n    kol = 0;\n    this.parsing(this.cont3d);\n  };\n\n  var cc;\n\n  this.parsing = function (c3d) {\n    if (c3d.name) {\n      for (var i = 0; i < this.array.length; i++) {\n        if (c3d.name == this.array[i].key) {\n          p = i;\n          this.pPlus(c3d, this.array[i]);\n          return;\n        }\n      }\n    }\n\n    if (c3d.children) {\n      for (var i = c3d.children.length - 1; i >= 0; i--) {\n        this.parsing(c3d.children[i]);\n      }\n    }\n  };\n\n  this.pPlus = function (c3d) {};\n}\nfunction CeshGeom(par) {\n  this.type = \"CeshGeom\";\n  var self = this;\n  self.kolCount = 9999;\n  this.par = par;\n  var objBody = {};\n  var kolA;\n  var geometry, material, mesh, meshPar, mesh1;\n  var instancePositions = [];\n  var instanceQuaternions = [];\n  var instanceScales = [];\n\n  this.set = function (c3d) {\n    objBody = {};\n    self.fillObjMesh(c3d);\n\n    for (var s in objBody) {\n      if (objBody[s].length >= 2) {\n        /*\r\n        for (var i = objBody[s].length-1; i >=0; i--) {\r\n        \tmesh=objBody[s][i]\r\n        \tmoveObject(mesh,c3d);\r\n        \tmeshPar=mesh.parent\r\n        \tmeshPar.remove(mesh);\t\t\t\t\t\r\n        }\t\t\t\t\r\n        this.meshCombined = new MeshCombined(objBody[s]);\r\n        c3d.add(this.meshCombined);*/\n        new LoadTime(this, c3d, objBody[s]);\n      }\n    }\n  };\n\n  this.sliteGeom = new SliteGeom(); //обьеденяет аналогичные геометрии\n\n  this.groupGeometri = function (c3d) {\n    objBody = {};\n    self.fillObjMesh(c3d);\n    var bb = false;\n\n    for (var s in objBody) {\n      if (objBody[s].length >= 2) {\n        //console.time(s+'==');\n        bb = true;\n        this.sliteGeom.start(objBody[s][0].geometry.clone());\n\n        for (var i = objBody[s].length - 1; i >= 0; i--) {\n          mesh = objBody[s][i];\n          moveObject(mesh, c3d);\n          this.sliteGeom.setMesh(mesh);\n          meshPar = mesh.parent;\n          meshPar.remove(mesh);\n        }\n\n        this.sliteGeom.final();\n        mesh1 = new THREE.Mesh(this.sliteGeom.creatGeom, mesh.material);\n        c3d.add(mesh1); //console.timeEnd(s+'==')\n      }\n    }\n\n    if (bb) self.killNull(c3d);\n  };\n\n  self.killNull = function (c3d) {\n    if (c3d.children) {\n      for (var i = c3d.children.length - 1; i >= 0; i--) {\n        self.killNull(c3d.children[i]);\n      }\n    }\n\n    if (c3d.geometry == undefined) {\n      if (c3d.children != undefined) if (c3d.children.length == 0) {\n        if (c3d.parent != undefined) {\n          c3d.parent.remove(c3d);\n          return;\n        }\n      }\n    }\n  };\n\n  self.fillObjMesh = function (c3d) {\n    var arrMesh = getAllMesh(c3d);\n\n    for (var i = 0; i < arrMesh.length; i++) {\n      if (arrMesh[i].geometry) {\n        if (arrMesh[i].geometry.index) {\n          if (arrMesh[i].geometry.index.count < self.kolCount) {\n            objBody[arrMesh[i].geometry.uuid] = objBody[arrMesh[i].geometry.uuid] || [];\n            objBody[arrMesh[i].geometry.uuid].push(arrMesh[i]);\n          }\n        }\n      }\n    }\n  };\n\n  function getAllMesh(obj) {\n    var arr = []; // obj.updateMatrix();\n\n    obj.updateMatrixWorld();\n\n    if (obj instanceof THREE.Mesh) {\n      arr.push(obj);\n    }\n\n    for (var i = 0; i < obj.children.length; i++) {\n      var childMeshes = getAllMesh(obj.children[i]);\n\n      for (var j = 0; j < childMeshes.length; j++) {\n        arr.push(childMeshes[j]);\n      }\n    }\n\n    return arr;\n  }\n\n  function moveObject(obj, newParent, parentNeedsUpdate, objNeedsUpdate) {\n    if (parentNeedsUpdate) newParent.updateMatrixWorld();\n    if (objNeedsUpdate) obj.updateMatrixWorld();\n    var m = new THREE.Matrix4().getInverse(newParent.matrixWorld);\n    if (obj.parent) m.multiply(obj.parent.matrixWorld);\n    obj.applyMatrix(m);\n    newParent.add(obj);\n  }\n\n  this.moveObject = function (obj, newParent, parentNeedsUpdate, objNeedsUpdate) {\n    moveObject(obj, newParent, parentNeedsUpdate, objNeedsUpdate);\n  };\n}\nfunction LoadTime(par, c3d, arr) {\n  this.type = \"LoadTime\";\n  var self = this;\n  this.par = par;\n  this.c3d = c3d;\n  this.arr = arr;\n  var geometry, material, mesh, meshPar, mesh1;\n  this.mesh = arr[0];\n  this.geom = arr[0].geometry;\n  this.mate = arr[0].material;\n  var bb = true;\n\n  this.initLoad = function () {\n    bb = false;\n    if (self.mate) if (self.mate.idObj != undefined) {\n      if (self.mate.loadTexure == 0) {\n        bb = true;\n      }\n    }\n\n    if (bb == false) {\n      setTimeout(function () {\n        self.initLoad();\n      }, 50);\n    } else {\n      self.creat();\n    }\n  };\n\n  this.creat = function () {\n    for (var i = arr.length - 1; i >= 0; i--) {\n      mesh = arr[i];\n      this.par.moveObject(mesh, c3d);\n      meshPar = mesh.parent;\n      meshPar.remove(mesh);\n    }\n\n    this.meshCombined = new _instance_MeshCombined_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](arr);\n    c3d.add(this.meshCombined);\n    var meshes = this.meshCombined._meshes;\n\n    for (var i = 0; i < this.meshCombined.children.length; i++) {\n      this.meshCombined.children[i].castShadow = mesh.castShadow;\n      this.meshCombined.children[i].receiveShadow = mesh.receiveShadow;\n      this.meshCombined.children[i].renderOrder = mesh.renderOrder;\n    }\n\n    this.par.killNull(c3d);\n  };\n\n  this.initLoad();\n}\nfunction SliteGeom() {\n  this.type = \"SliteGeom\";\n  var self = this;\n  this.geometry;\n  this.kol;\n  this.ah = [];\n  this.sah = 0;\n  this.sahMesh = 0;\n  this.creatGeom;\n  this.ap = [];\n  this.ai = [];\n  this.auv = [];\n\n  this.start = function (_bufferGeometry) {\n    this.geometry = _bufferGeometry;\n    this.creatGeom = new THREE.BufferGeometry();\n    this.sah = 0;\n    this.sahMesh = 0;\n    this.ap = [];\n    this.ai = [];\n    this.auv = [];\n    this.sPosit();\n  }; //наполняем массив с позициями\n\n\n  this.sPosit = function () {\n    for (var i = 0; i < this.geometry.index.count; i++) {\n      if (this.ah[this.sah] == undefined) this.ah[this.sah] = new SGHron();\n      this.ah[this.sah].posOld.set(this.geometry.attributes.position.array[this.geometry.index.array[i] * 3], this.geometry.attributes.position.array[this.geometry.index.array[i] * 3 + 1], this.geometry.attributes.position.array[this.geometry.index.array[i] * 3 + 2]);\n      this.ah[this.sah].uv.set(this.geometry.attributes.uv.array[this.geometry.index.array[i] * 2], this.geometry.attributes.uv.array[this.geometry.index.array[i] * 2 + 1]);\n      this.ah[this.sah].index = this.geometry.index.array[i];\n      this.sah++;\n    }\n  };\n\n  var kolSah;\n\n  this.setMesh = function (mesh) {\n    kolSah = this.sahMesh * this.sah;\n\n    for (var i = 0; i < this.sah; i++) {\n      this.ah[i].setMesh(mesh);\n      this.ap.push(this.ah[i].pos.x, this.ah[i].pos.y, this.ah[i].pos.z);\n      this.auv.push(this.ah[i].uv.x, this.ah[i].uv.y);\n      this.ai.push(this.ah[i].index + kolSah);\n    }\n\n    this.sahMesh++;\n  };\n\n  this.final = function () {\n    this.creatGeom.setIndex(this.ai);\n    this.creatGeom.addAttribute('position', new THREE.BufferAttribute(new Float32Array(this.ap), 3));\n    this.creatGeom.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.auv), 2));\n    this.creatGeom.attributes.position.needsUpdate = true;\n    this.creatGeom.attributes.uv.needsUpdate = true;\n    this.creatGeom.computeVertexNormals();\n    this.creatGeom.attributes.normal.needsUpdate = true;\n    this.creatGeom.computeBoundingBox();\n    this.creatGeom.computeBoundingSphere();\n  };\n}\nfunction SGHron() {\n  this.type = \"SliteGeom\";\n  this.pos = new THREE.Vector3();\n  this.posOld = new THREE.Vector3(); //старый\n\n  this.uv = new THREE.Vector2();\n  this.index = 0;\n\n  this.setMesh = function (mesh) {\n    this.pos.set(this.posOld.x, this.posOld.y, this.posOld.z);\n    this.pos.applyMatrix4(mesh.matrix);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pm/PMFilt.js\n");

/***/ }),

/***/ "./src/pm/PMIz.js":
/*!************************!*\
  !*** ./src/pm/PMIz.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PMIz; });\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction PMIz(par, visi3D, objbase) {\n  this.type = \"PMFilt\";\n  var self = this;\n  this.par = par;\n  this.visi3D = visi3D;\n  this.objbase = objbase;\n\n  this.setHron = function (hron, _c) {\n    var o, c;\n    o = hron.object.iz;\n    c = hron.content3d;\n    if (_c) c = _c;\n    if (c == undefined || o == undefined) return;\n\n    if (o.a == true) {\n      this.setMod(c, this.strToObj(o.str), o.st);\n    }\n  };\n\n  this.strToObj = function (s) {\n    var ss = \"\";\n\n    for (var i = 0; i < s.length; i++) {\n      if (s[i] == '|') ss += '\"';else ss += s[i];\n    }\n\n    var o = JSON.parse(ss);\n    return o;\n  }; ////////////////////////get///////////////////////////////////\n  //------------------------------------------------------------\n\n\n  var sahMi, arrMi;\n\n  this.getIz = function (_c3d) {\n    sahMi++;\n\n    if (_c3d.iz != undefined) {\n      var o = 0;\n\n      if (_c3d.iz.renderOrder != undefined) {\n        if (o == 0) o = {};\n        o.renderOrder = _c3d.iz.renderOrder;\n      }\n\n      if (_c3d.iz.bs != undefined) {\n        if (o == 0) o = {};\n        o.bs = _c3d.iz.bs;\n      }\n\n      if (_c3d.iz.mod != undefined) {\n        if (o == 0) o = {};\n        o.mod = _c3d.iz.mod;\n      }\n\n      if (_c3d.iz.position != undefined) {\n        if (o == 0) o = {};\n        o.position = _c3d.iz.position;\n      }\n\n      if (_c3d.iz.scale != undefined) {\n        if (o == 0) o = {};\n        o.scale = _c3d.iz.scale;\n      }\n\n      if (_c3d.iz.rotation != undefined) {\n        if (o == 0) o = {};\n        o.rotation = _c3d.iz.rotation;\n      }\n\n      if (_c3d.iz.visible != undefined) {\n        if (o == 0) o = {};\n        o.visible = _c3d.iz.visible;\n      }\n\n      if (_c3d.iz.material != undefined) {\n        if (o == 0) o = {};\n        o.material = _c3d.iz.material;\n      }\n\n      if (o != 0) o.sah = sahMi;\n      arrMi.push(o);\n    } else {\n      arrMi.push(0);\n    }\n\n    if (_c3d.children && _c3d.notPar == undefined) {\n      for (var i = 0; i < _c3d.children.length; i++) {\n        this.getIz(_c3d.children[i]);\n      }\n    }\n  };\n\n  this.getMod = function (_c3d) {\n    sahMi = -1;\n    arrMi = [];\n    this.getIz(_c3d);\n    return arrMi;\n  }; ////////////////////////set///////////////////////////////////\n  //------------------------------------------------------------\n\n\n  var aa;\n\n  this.setIz = function (_c3d, _bool) {\n    sahMi++;\n\n    if (aa[sahMi]) {\n      if (aa[sahMi] != 0) {\n        _c3d.iz = {};\n\n        if (aa[sahMi].mod != undefined) {\n          if (_bool) _c3d.iz.mod = aa[sahMi].mod;\n          var o = new THREE.Object3D();\n          var ii = 0;\n\n          for (var i = 0; i < _c3d.parent.children.length; i++) {\n            if (_c3d.parent.children[i].uuid == _c3d.uuid) ii = i;\n          }\n\n          o.notPar = true;\n\n          _c3d.parent.add(o);\n\n          _c3d.parent.remove(_c3d);\n\n          o.parent.children.splice(o.parent.children.length - 1, 1);\n          o.parent.children.splice(ii, 0, o);\n          self.par.getId(aa[sahMi].mod, function (c3d) {\n            o.add(c3d);\n          });\n        }\n\n        if (aa[sahMi].renderOrder != undefined) {\n          if (_bool) _c3d.iz.renderOrder = aa[sahMi].renderOrder;\n          _c3d.renderOrder = aa[sahMi].renderOrder;\n        }\n\n        if (aa[sahMi].bs != undefined) {\n          if (_bool) _c3d.iz.bs = aa[sahMi].bs;\n          _c3d.bs = aa[sahMi].bs;\n        }\n\n        if (aa[sahMi].position != undefined) {\n          if (_bool) _c3d.iz.position = aa[sahMi].position;\n\n          _c3d.position.set(aa[sahMi].position.x, aa[sahMi].position.y, aa[sahMi].position.z);\n        }\n\n        if (aa[sahMi].scale != undefined) {\n          if (_bool) _c3d.iz.scale = aa[sahMi].scale;\n\n          _c3d.scale.set(aa[sahMi].scale.x, aa[sahMi].scale.y, aa[sahMi].scale.z);\n        }\n\n        if (aa[sahMi].rotation != undefined) {\n          if (_bool) _c3d.iz.rotation = aa[sahMi].rotation;\n\n          _c3d.rotation.set(aa[sahMi].rotation.x, aa[sahMi].rotation.y, aa[sahMi].rotation.z);\n        }\n\n        if (aa[sahMi].visible != undefined) {\n          if (_bool) _c3d.iz.visible = aa[sahMi].visible;\n          _c3d.visible = aa[sahMi].visible;\n        }\n\n        if (aa[sahMi].material != undefined) {\n          if (_c3d.material) {\n            if (_c3d.oldName == undefined) {\n              _c3d.oldName = _c3d.material.name;\n            }\n\n            if (_bool) _c3d.iz.material = aa[sahMi].material;\n            _c3d.material = self.par.mat.getIDReturn(aa[sahMi].material);\n          }\n        }\n      }\n    } else {//return\n    }\n\n    if (_c3d.children && _c3d.notPar == undefined) {\n      for (var i = 0; i < _c3d.children.length; i++) {\n        this.setIz(_c3d.children[i]);\n      }\n    }\n  };\n\n  this.setMod = function (_c3d, _a, b) {\n    if (_typeof(_a) != \"object\") return;\n    if (_a[0] == undefined) return;\n    aa = _a;\n    sahMi = -1;\n    this.setIz(_c3d, b);\n  }; ////////////////////////MAT///////////////////////////////////\n  //------------------------------------------------------------   \n\n\n  this.setMat = function (_c3d, _mat, _name, _bool) {\n    if (_bool != undefined) _bool = true;\n\n    if (_c3d.material != undefined) {\n      if (_c3d.oldName == undefined) {\n        _c3d.oldName = _c3d.material.name;\n      }\n\n      if (typeof _mat == \"string\") _mat = this.par.mat.getIDReturn(_mat, _bool);\n\n      if (_name == null) {\n        _c3d.material = _mat;\n        if (_c3d.iz == undefined) _c3d.iz = {};\n        _c3d.iz.material = _mat.idUz;\n      } else {\n        if (_c3d.oldName) {\n          if (_c3d.oldName.indexOf(_name) != -1) {\n            _c3d.material = _mat;\n            if (_c3d.iz == undefined) _c3d.iz = {};\n            _c3d.iz.material = _mat.idUz;\n          }\n        }\n      }\n    }\n\n    if (_c3d.children) {\n      if (_c3d.notPar == undefined) {\n        for (var i = 0; i < _c3d.children.length; i++) {\n          this.setMat(_c3d.children[i], _mat, _name, _bool);\n        }\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pm/PMIz.js\n");

/***/ }),

/***/ "./src/pm/PMMat.js":
/*!*************************!*\
  !*** ./src/pm/PMMat.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PMMat; });\nfunction PMMat(par, visi3D, objbase) {\n  this.type = \"PMMat\";\n  var self = this;\n  this.par = par;\n  this.visi3D = visi3D;\n  this.objbase = objbase;\n  this.pmTexture = this.par.tex;\n  this.ser = window.location.href;\n  var arrParams = window.location.href.split(\"?\");\n  var arrParams2 = arrParams[0].split(\"/\");\n  this.server = \"\";\n\n  for (var i = 0; i < arrParams2.length - 1; i++) {\n    this.server += arrParams2[i] + \"/\";\n  }\n\n  this.setObjS = function (c3d, obj, fun) {\n    this.getTestTitleObj(c3d);\n    fun();\n  };\n\n  this.testObjMatLoad = function (c3d) {\n    if (c3d.children) {\n      for (var i = 0; i < c3d.children.length; i++) {\n        if (this.testObjMatLoad(c3d.children[i]) == false) return false;\n      }\n    }\n\n    if (c3d.material) {\n      if (c3d.material.bLoad != undefined) {\n        if (c3d.material.bLoad == false) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  this.matarialArray = this.objbase.materials;\n  var matarialArray = this.matarialArray;\n  this.idColor = null;\n  var loader = new THREE.TextureLoader();\n  this.obj = {};\n\n  this.getTestTitle = function (_text) {\n    var r = null;\n\n    if (_text != undefined) {\n      for (var i = 0; i < matarialArray.length; i++) {\n        if (_text.indexOf(matarialArray[i].title) != -1) {\n          r = this.getIDReturn(matarialArray[i].id);\n          return r;\n        }\n      }\n    }\n\n    return r;\n  };\n\n  var rt;\n\n  this.getTestTitleObj = function (_o3d) {\n    if (_o3d.material) {\n      rt = this.getTestTitle(_o3d.material.name);\n      if (rt != null) _o3d.material = rt;\n    }\n\n    for (var i = 0; i < _o3d.children.length; i++) {\n      this.getTestTitleObj(_o3d.children[i]);\n    }\n  };\n\n  this.getIDReturn = function (id, isBD) {\n    var r = null;\n    var p = -1;\n\n    for (var i = 0; i < matarialArray.length; i++) {\n      if (matarialArray[i].id == id) {\n        p = i;\n      }\n    }\n\n    if (p == -1) return null;\n\n    if (isBD == undefined) {\n      if (this.obj[id] != undefined) return this.obj[id];\n    }\n\n    var comand = 'new THREE.' + matarialArray[p].key + '()';\n    var m = eval(comand);\n    m.idObj = matarialArray[p];\n    this.startMat(m, id);\n    this.obj[id] = m;\n    m.idUz = id;\n    return m;\n  };\n\n  this.get = function (_title, _fun, bNameMat) {\n    var r = null;\n    var p = -1;\n    var s, s1, b;\n    var id;\n\n    if (bNameMat != undefined) {\n      //швишник может быть дленее по стрингу ищем его в базе   \n      s = _title + \"\";\n      _title = \"2456567567867896789\";\n\n      for (var i = 0; i < this.matarialArray.length; i++) {\n        s1 = this.matarialArray[i].title + \"\";\n\n        if (s.indexOf(s1) != -1) {\n          _title = this.matarialArray[i].title;\n          break;\n        }\n      }\n    }\n\n    for (var i = 0; i < this.matarialArray.length; i++) {\n      if (this.matarialArray[i].title == _title) {\n        p = i;\n      }\n    }\n\n    if (p == -1) {\n      _fun(null);\n\n      return;\n    }\n\n    this.getId(this.matarialArray[p].id, _fun);\n  };\n\n  this.getId = function (id, _fun) {\n    var p = -1;\n\n    for (var i = 0; i < this.matarialArray.length; i++) {\n      if (this.matarialArray[i].id == id) {\n        p = i;\n        break;\n      }\n    }\n\n    if (p == -1) {\n      _fun(null);\n\n      return;\n    }\n\n    if (this.obj[id] != undefined) {\n      if (this.obj[id].bLoad == true) {\n        _fun(this.obj[id]);\n      } else {\n        this.obj[id].arrFun.push(_fun);\n      }\n\n      return this.obj[id];\n    }\n\n    var comand = 'new THREE.' + this.matarialArray[p].key + '()';\n    var m = eval(comand);\n    m.idObj = matarialArray[p];\n    m.bLoad = false;\n    m.loadTexure = 999;\n    m.arrFun = [_fun];\n    this.startMat(m, id);\n    this.obj[id] = m;\n    return m;\n  };\n\n  var textur;\n\n  this.objToMater = function (o, m) {\n    var _this = this;\n\n    var s;\n\n    for (var s in o) {\n      if (m[s] != undefined) {\n        if (m[s] instanceof THREE.Color) {\n          m[s] = new THREE.Color(o[s]);\n        } else {\n          m[s] = o[s];\n        }\n      }\n    }\n\n    m.loadTexure = 0;\n\n    if (o.textur) {\n      m.loadTexure = o.textur.length;\n\n      for (var i = 0; i < o.textur.length; i++) {\n        if (o.textur[i].id) {\n          (function () {\n            var index = i;\n            textur = _this.pmTexture.getById(o.textur[i].id, function (t) {\n              m[o.textur[index].name] = t;\n              --m.loadTexure;\n            });\n            m[o.textur[i].name] = textur;\n          })();\n        } else {\n          textur = loader.load(o.textur[i].link, function () {\n            self.visi3D.intRend = 1;\n            m.loadTexure--;\n          });\n          textur.wrapS = textur.wrapT = THREE.RepeatWrapping;\n          textur.repeat.x = o.textur[i].rx;\n          textur.repeat.y = o.textur[i].ry;\n          m[o.textur[i].name] = textur;\n        }\n      }\n    } //m.wireframe=true;\n\n\n    m.needsUpdate = true;\n    m.bLoad = true;\n    if (m.arrFun) for (var i = 0; i < m.arrFun.length; i++) {\n      m.arrFun[i](m);\n    }\n  };\n\n  this.startMat = function (m, id) {\n    var o;\n    var l = this.server + \"resources/data/\" + id + \"/config.json\" + self.par.plus;\n    $.ajax({\n      url: l,\n      success: function function_name(data) {\n        if (typeof data === \"string\") {\n          var conf = JSON.parse(data);\n          o = conf;\n        } else o = data;\n\n        if (o.mirro === true) {\n          m.envMap = self.visi3D.getEnvMap();\n        } else {\n          if (o.mirro == 0) {}\n\n          if (o.mirro == 1) {\n            m.envMap = self.visi3D.getEnvMap();\n          }\n\n          if (o.mirro == 2) {\n            m.envMap = self.visi3D.getEnvMap1();\n          }\n        }\n\n        self.objToMater(o.obj, m);\n      },\n      error: function function_name(data) {\n        self.start();\n      }\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcG0vUE1NYXQuanM/OTU3MiJdLCJuYW1lcyI6WyJQTU1hdCIsInBhciIsInZpc2kzRCIsIm9iamJhc2UiLCJ0eXBlIiwic2VsZiIsInBtVGV4dHVyZSIsInRleCIsInNlciIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImFyclBhcmFtcyIsInNwbGl0IiwiYXJyUGFyYW1zMiIsInNlcnZlciIsImkiLCJsZW5ndGgiLCJzZXRPYmpTIiwiYzNkIiwib2JqIiwiZnVuIiwiZ2V0VGVzdFRpdGxlT2JqIiwidGVzdE9iak1hdExvYWQiLCJjaGlsZHJlbiIsIm1hdGVyaWFsIiwiYkxvYWQiLCJ1bmRlZmluZWQiLCJtYXRhcmlhbEFycmF5IiwibWF0ZXJpYWxzIiwiaWRDb2xvciIsImxvYWRlciIsIlRIUkVFIiwiVGV4dHVyZUxvYWRlciIsImdldFRlc3RUaXRsZSIsIl90ZXh0IiwiciIsImluZGV4T2YiLCJ0aXRsZSIsImdldElEUmV0dXJuIiwiaWQiLCJydCIsIl9vM2QiLCJuYW1lIiwiaXNCRCIsInAiLCJjb21hbmQiLCJrZXkiLCJtIiwiZXZhbCIsImlkT2JqIiwic3RhcnRNYXQiLCJpZFV6IiwiZ2V0IiwiX3RpdGxlIiwiX2Z1biIsImJOYW1lTWF0IiwicyIsInMxIiwiYiIsImdldElkIiwiYXJyRnVuIiwicHVzaCIsImxvYWRUZXh1cmUiLCJ0ZXh0dXIiLCJvYmpUb01hdGVyIiwibyIsIkNvbG9yIiwiaW5kZXgiLCJnZXRCeUlkIiwidCIsImxvYWQiLCJsaW5rIiwiaW50UmVuZCIsIndyYXBTIiwid3JhcFQiLCJSZXBlYXRXcmFwcGluZyIsInJlcGVhdCIsIngiLCJyeCIsInkiLCJyeSIsIm5lZWRzVXBkYXRlIiwibCIsInBsdXMiLCIkIiwiYWpheCIsInVybCIsInN1Y2Nlc3MiLCJmdW5jdGlvbl9uYW1lIiwiZGF0YSIsImNvbmYiLCJKU09OIiwicGFyc2UiLCJtaXJybyIsImVudk1hcCIsImdldEVudk1hcCIsImdldEVu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LElBQXZCLEVBQTZCO0FBQ2xDLFlBQUcsT0FBT0EsSUFBUCxLQUFnQixRQUFuQixFQUE2QjtBQUN6QixjQUFJQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxJQUFYLENBQVg7QUFDQXhCLFdBQUMsR0FBR3lCLElBQUo7QUFDSCxTQUhELE1BR096QixDQUFDLEdBQUd3QixJQUFKOztBQUlQLFlBQUd4QixDQUFDLENBQUM0QixLQUFGLEtBQVUsSUFBYixFQUFrQjtBQUNkOUMsV0FBQyxDQUFDK0MsTUFBRixHQUFTMUYsSUFBSSxDQUFDSCxNQUFMLENBQVk4RixTQUFaLEVBQVQ7QUFDSCxTQUZELE1BRUs7QUFDRCxjQUFHOUIsQ0FBQyxDQUFDNEIsS0FBRixJQUFTLENBQVosRUFBYyxDQUViOztBQUNELGNBQUc1QixDQUFDLENBQUM0QixLQUFGLElBQVMsQ0FBWixFQUFjO0FBQ1Y5QyxhQUFDLENBQUMrQyxNQUFGLEdBQVMxRixJQUFJLENBQUNILE1BQUwsQ0FBWThGLFNBQVosRUFBVDtBQUNIOztBQUNELGNBQUc5QixDQUFDLENBQUM0QixLQUFGLElBQVMsQ0FBWixFQUFjO0FBQ1Y5QyxhQUFDLENBQUMrQyxNQUFGLEdBQVMxRixJQUFJLENBQUNILE1BQUwsQ0FBWStGLFVBQVosRUFBVDtBQUNIO0FBQ0o7O0FBS0Q1RixZQUFJLENBQUM0RCxVQUFMLENBQWdCQyxDQUFDLENBQUM5QyxHQUFsQixFQUFzQjRCLENBQXRCO0FBQ0gsT0E1QkU7QUE2QkhrRCxXQUFLLEVBQUMsU0FBU1QsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFFL0JyRixZQUFJLENBQUM4RixLQUFMO0FBQ0g7QUFoQ0UsS0FBUDtBQWtDSCxHQXRDRDtBQXVDSCIsImZpbGUiOiIuL3NyYy9wbS9QTU1hdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBNTWF0KHBhciwgdmlzaTNELCBvYmpiYXNlKSB7IFxyXG5cdHRoaXMudHlwZT1cIlBNTWF0XCI7XHJcbiAgICB2YXIgc2VsZj10aGlzO1xyXG5cclxuICAgIHRoaXMucGFyPXBhclxyXG4gICAgdGhpcy52aXNpM0Q9dmlzaTNEXHJcbiAgICB0aGlzLm9iamJhc2U9b2JqYmFzZTtcclxuXHJcbiAgICB0aGlzLnBtVGV4dHVyZSA9IHRoaXMucGFyLnRleDtcclxuICAgIHRoaXMuc2VyID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcblxyXG4gICAgdmFyIGFyclBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiP1wiKTsgXHJcbiAgICAgICAgICAgIFxyXG4gICAgdmFyIGFyclBhcmFtczIgPSBhcnJQYXJhbXNbMF0uc3BsaXQoXCIvXCIpO1xyXG4gXHJcbiAgICB0aGlzLnNlcnZlcj1cIlwiXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyclBhcmFtczIubGVuZ3RoLTE7IGkrKykge1xyXG4gICAgICAgIHRoaXMuc2VydmVyKz1hcnJQYXJhbXMyW2ldK1wiL1wiXHJcbiAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIHRoaXMuc2V0T2JqUyA9IGZ1bmN0aW9uIChjM2Qsb2JqLGZ1bil7XHJcbiAgICAgICAgdGhpcy5nZXRUZXN0VGl0bGVPYmooYzNkKVxyXG4gICAgICAgIGZ1bigpXHJcbiAgICB9ICAgXHJcblxyXG5cclxuICAgIHRoaXMudGVzdE9iak1hdExvYWQ9ZnVuY3Rpb24oYzNkKXtcclxuICAgICAgICBcclxuICAgICAgICBpZihjM2QuY2hpbGRyZW4pe1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGMzZC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy50ZXN0T2JqTWF0TG9hZChjM2QuY2hpbGRyZW5baV0pPT1mYWxzZSlyZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcblxyXG4gICAgICAgIGlmKGMzZC5tYXRlcmlhbCl7XHJcbiAgICAgICAgICAgIGlmKGMzZC5tYXRlcmlhbC5iTG9hZCE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGlmKGMzZC5tYXRlcmlhbC5iTG9hZD09ZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIFxyXG4gICAgdGhpcy5tYXRhcmlhbEFycmF5PXRoaXMub2JqYmFzZS5tYXRlcmlhbHM7XHJcbiAgICB2YXIgbWF0YXJpYWxBcnJheT10aGlzLm1hdGFyaWFsQXJyYXlcclxuICAgIHRoaXMuaWRDb2xvcj1udWxsO1xyXG4gICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XHJcbiAgXHJcbiAgICB0aGlzLm9iaj17fVxyXG5cclxuICAgIHRoaXMuZ2V0VGVzdFRpdGxlPWZ1bmN0aW9uKF90ZXh0KXsgICAgICAgIFxyXG4gICAgICAgIHZhciByPW51bGw7ICAgICAgXHJcbiAgICAgICAgaWYoX3RleHQhPXVuZGVmaW5lZCl7IFxyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRhcmlhbEFycmF5Lmxlbmd0aDsgaSsrKSB7IFxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoX3RleHQuaW5kZXhPZihtYXRhcmlhbEFycmF5W2ldLnRpdGxlKSE9LTEpeyBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHI9dGhpcy5nZXRJRFJldHVybihtYXRhcmlhbEFycmF5W2ldLmlkKTsgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gclxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgcnRcclxuICAgIHRoaXMuZ2V0VGVzdFRpdGxlT2JqPWZ1bmN0aW9uKF9vM2Qpe1xyXG4gICAgICBcclxuICAgICAgICBpZihfbzNkLm1hdGVyaWFsKXsgICAgICAgICAgIFxyXG4gICAgICAgICAgICBydD10aGlzLmdldFRlc3RUaXRsZShfbzNkLm1hdGVyaWFsLm5hbWUpICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHJ0IT1udWxsKV9vM2QubWF0ZXJpYWw9cnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX28zZC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmdldFRlc3RUaXRsZU9iaihfbzNkLmNoaWxkcmVuW2ldKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICB0aGlzLmdldElEUmV0dXJuPWZ1bmN0aW9uKGlkLCBpc0JEKXtcclxuICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHI9bnVsbDtcclxuICAgICAgICAgICAgdmFyIHA9LTE7ICAgIFxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGFyaWFsQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmKG1hdGFyaWFsQXJyYXlbaV0uaWQ9PWlkKXtcclxuICAgICAgICAgICAgICAgICAgICBwPWk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYocD09LTEpcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGlmKGlzQkQ9PXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMub2JqW2lkXSE9dW5kZWZpbmVkKXJldHVybiB0aGlzLm9ialtpZF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdmFyIGNvbWFuZCA9ICduZXcgVEhSRUUuJyArIG1hdGFyaWFsQXJyYXlbcF0ua2V5ICsgJygpJztcclxuICAgICAgICB2YXIgbSA9IGV2YWwoY29tYW5kKTtcclxuICAgICAgICBtLmlkT2JqPW1hdGFyaWFsQXJyYXlbcF1cclxuICAgICAgICB0aGlzLnN0YXJ0TWF0KG0sIGlkKVxyXG4gICAgICAgIHRoaXMub2JqW2lkXT1tO1xyXG4gICAgICAgIG0uaWRVej1pZFxyXG4gICAgICAgIHJldHVybiBtOyAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHRoaXMuZ2V0PWZ1bmN0aW9uKF90aXRsZSwgX2Z1biwgYk5hbWVNYXQpeyAgICAgICAgXHJcbiAgICAgICAgdmFyIHI9bnVsbDtcclxuICAgICAgICB2YXIgcD0tMTsgXHJcbiAgICAgICAgdmFyIHMsczEsYjtcclxuICAgICAgICB2YXIgaWRcclxuICAgICAgICBpZihiTmFtZU1hdCE9dW5kZWZpbmVkKXsvL9GI0LLQuNGI0L3QuNC6INC80L7QttC10YIg0LHRi9GC0Ywg0LTQu9C10L3QtdC1INC/0L4g0YHRgtGA0LjQvdCz0YMg0LjRidC10Lwg0LXQs9C+INCyINCx0LDQt9C1ICAgXHJcbiAgICAgICAgICAgIHM9X3RpdGxlK1wiXCJcclxuICAgICAgICAgICAgX3RpdGxlPVwiMjQ1NjU2NzU2Nzg2Nzg5Njc4OVwiICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXRhcmlhbEFycmF5Lmxlbmd0aDsgaSsrKSB7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzMT10aGlzLm1hdGFyaWFsQXJyYXlbaV0udGl0bGUrXCJcIiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYocy5pbmRleE9mKHMxKSE9LTEpeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlID0gdGhpcy5tYXRhcmlhbEFycmF5W2ldLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hdGFyaWFsQXJyYXkubGVuZ3RoOyBpKyspIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5tYXRhcmlhbEFycmF5W2ldLnRpdGxlPT1fdGl0bGUpe1xyXG4gICAgICAgICAgICAgICAgcD1pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgaWYocD09LTEpe1xyXG4gICAgICAgICAgICBfZnVuKG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2V0SWQodGhpcy5tYXRhcmlhbEFycmF5W3BdLmlkLCBfZnVuKVxyXG4gICAgfVxyXG4gICAgdGhpcy5nZXRJZD1mdW5jdGlvbihpZCwgX2Z1bil7XHJcbiAgICAgICAgdmFyIHA9LTE7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hdGFyaWFsQXJyYXkubGVuZ3RoOyBpKyspIHsgICBcclxuICAgICAgICAgICAgaWYodGhpcy5tYXRhcmlhbEFycmF5W2ldLmlkPT1pZCl7XHJcbiAgICAgICAgICAgICAgICBwPWk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihwPT0tMSl7XHJcbiAgICAgICAgICAgIF9mdW4obnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcblxyXG5cclxuICAgICAgICBpZih0aGlzLm9ialtpZF0hPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMub2JqW2lkXS5iTG9hZD09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICBfZnVuKHRoaXMub2JqW2lkXSlcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMub2JqW2lkXS5hcnJGdW4ucHVzaChfZnVuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqW2lkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWFuZCA9ICduZXcgVEhSRUUuJyArIHRoaXMubWF0YXJpYWxBcnJheVtwXS5rZXkgKyAnKCknO1xyXG4gICAgICAgIHZhciBtID0gZXZhbChjb21hbmQpOyAgXHJcbiAgICAgICAgbS5pZE9iaj1tYXRhcmlhbEFycmF5W3BdXHJcbiAgICAgICAgbS5iTG9hZD1mYWxzZTtcclxuICAgICAgICBtLmxvYWRUZXh1cmU9OTk5O1xyXG4gICAgICAgIG0uYXJyRnVuPVtfZnVuXSBcclxuICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RhcnRNYXQobSwgaWQpXHJcbiAgICAgICAgdGhpcy5vYmpbaWRdPW07XHJcbiAgICAgICAgcmV0dXJuIG07ICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHZhciB0ZXh0dXJcclxuICAgIHRoaXMub2JqVG9NYXRlcj1mdW5jdGlvbihvLG0pe1xyXG4gICAgICAgIHZhciBzO1xyXG4gICAgICAgIGZvcih2YXIgcyBpbiBvKXtcclxuICAgICAgICAgICAgaWYobVtzXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGlmKG1bc10gaW5zdGFuY2VvZiBUSFJFRS5Db2xvciApeyAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBtW3NdPW5ldyBUSFJFRS5Db2xvcihvW3NdKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIG1bc109b1tzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbS5sb2FkVGV4dXJlID0gMFxyXG4gICAgICAgIGlmIChvLnRleHR1cikge1xyXG4gICAgICAgICAgICBtLmxvYWRUZXh1cmUgPSBvLnRleHR1ci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgby50ZXh0dXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChvLnRleHR1cltpXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyID0gdGhpcy5wbVRleHR1cmUuZ2V0QnlJZChvLnRleHR1cltpXS5pZCwgKHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbVtvLnRleHR1cltpbmRleF0ubmFtZV0gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAtLW0ubG9hZFRleHVyZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtW28udGV4dHVyW2ldLm5hbWVdID0gdGV4dHVyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXIgPSBsb2FkZXIubG9hZChvLnRleHR1cltpXS5saW5rLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudmlzaTNELmludFJlbmQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmxvYWRUZXh1cmUtLTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHRleHR1ci53cmFwUyA9IHRleHR1ci53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHR1ci5yZXBlYXQueCA9IG8udGV4dHVyW2ldLnJ4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHR1ci5yZXBlYXQueSA9IG8udGV4dHVyW2ldLnJ5O1xyXG4gICAgICAgICAgICAgICAgICAgIG1bby50ZXh0dXJbaV0ubmFtZV0gPSB0ZXh0dXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvL20ud2lyZWZyYW1lPXRydWU7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZT10cnVlO1xyXG4gICAgICAgIG0uYkxvYWQ9dHJ1ZTtcclxuICAgICAgICBpZihtLmFyckZ1bilcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uYXJyRnVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG0uYXJyRnVuW2ldKG0pO1xyXG4gICAgICAgIH0gICAgICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgICBcclxuXHJcbiAgICB0aGlzLnN0YXJ0TWF0PWZ1bmN0aW9uKG0sIGlkKXtcclxuICAgICAgICB2YXIgbztcclxuICAgICAgICB2YXIgbD10aGlzLnNlcnZlcitcInJlc291cmNlcy9kYXRhL1wiK2lkK1wiL2NvbmZpZy5qc29uXCIrc2VsZi5wYXIucGx1cztcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBmdW5jdGlvbl9uYW1lKGRhdGEpIHsgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25mID0gSlNPTi5wYXJzZShkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIG8gPSBjb25mO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIG8gPSBkYXRhOyBcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZihvLm1pcnJvPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbS5lbnZNYXA9c2VsZi52aXNpM0QuZ2V0RW52TWFwKClcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG8ubWlycm89PTApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoby5taXJybz09MSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uZW52TWFwPXNlbGYudmlzaTNELmdldEVudk1hcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG8ubWlycm89PTIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmVudk1hcD1zZWxmLnZpc2kzRC5nZXRFbnZNYXAxKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYub2JqVG9NYXRlcihvLm9iaixtKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjpmdW5jdGlvbiBmdW5jdGlvbl9uYW1lKGRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTsgXHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pm/PMMat.js\n");

/***/ }),

/***/ "./src/pm/PMTexture.js":
/*!*****************************!*\
  !*** ./src/pm/PMTexture.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PMTexture; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PMTexture =\n/*#__PURE__*/\nfunction () {\n  function PMTexture(par, visi3D, objbase) {\n    _classCallCheck(this, PMTexture);\n\n    this.type = \"PMTexture\";\n    this.par = par;\n    this.visi3D = visi3D;\n    this.objbase = objbase;\n    this.loader = new THREE.TextureLoader();\n    this.textureCache = {};\n    window.textureCache = this.textureCache;\n  }\n\n  _createClass(PMTexture, [{\n    key: \"getById\",\n    value: function getById(id, fun) {\n      var _this = this;\n\n      if (this.textureCache[id] && this.textureCache[id].loaded) {\n        fun && setTimeout(function () {\n          return fun(_this.textureCache[id].texture);\n        }, 0);\n        return this.textureCache[id].texture;\n      } else {\n        var objDin = this.getObj(id);\n        return this.loadTexture(objDin, fun);\n      }\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(objDin, fun) {\n      var _this2 = this;\n\n      if (!this.textureCache[objDin.id] || !this.textureCache[objDin.id].callbacks) {\n        this.textureCache[objDin.id] = {\n          callbacks: []\n        };\n      }\n\n      if (!this.textureCache[objDin.id].texture) {\n        var path = window.location.href.split('/');\n        path.pop();\n        var link = path.join('/') + '/resources/data/' + objDin.id + '/pic.' + objDin.type;\n        var texture = this.loader.load(link, function (texture) {\n          _this2.visi3D.intRend = 1;\n          texture.obj = {};\n\n          _this2.textureCache[objDin.id].callbacks.forEach(function (f) {\n            return f(texture);\n          });\n\n          delete _this2.textureCache[objDin.id].callbacks;\n          _this2.textureCache[objDin.id].loaded = true;\n        });\n        texture.arrMat = [];\n        texture.arrRun = [];\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.x = objDin.rx;\n        texture.repeat.y = objDin.ry;\n        this.textureCache[objDin.id].texture = texture;\n      }\n\n      fun && this.textureCache[objDin.id].callbacks.push(fun);\n      return this.textureCache[objDin.id].texture;\n    }\n  }, {\n    key: \"updateTexture\",\n    value: function updateTexture(objDin, reload) {\n      var _this3 = this;\n\n      if (!this.textureCache[objDin.id]) {\n        return;\n      }\n\n      if (reload) {\n        var img = new Image();\n        var path = window.location.href.split('/');\n        path.pop();\n        img.src = path.join('/') + '/resources/data/' + objDin.id + '/pic.' + objDin.type;\n        this.textureCache[objDin.id].texture.image = img;\n        this.textureCache[objDin.id].loaded = false;\n\n        img.onload = function () {\n          delete _this3.textureCache[objDin.id].callbacks;\n          _this3.textureCache[objDin.id].loaded = true;\n          _this3.textureCache[objDin.id].texture.needsUpdate = true;\n        };\n      } else {\n        this.textureCache[objDin.id].texture.repeat.x = objDin.rx;\n        this.textureCache[objDin.id].texture.repeat.y = objDin.ry;\n      }\n    }\n  }, {\n    key: \"getObj\",\n    value: function getObj(id) {\n      return this.objbase.textures.find(function (o) {\n        return o.id === id;\n      }) || null;\n    }\n  }]);\n\n  return PMTexture;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pm/PMTexture.js\n");

/***/ }),

/***/ "./src/pm/index.js":
/*!*************************!*\
  !*** ./src/pm/index.js ***!
  \*************************/
/*! exports provided: PM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _PM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PM.js */ \"./src/pm/PM.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PM\", function() { return _PM_js__WEBPACK_IMPORTED_MODULE_0__[\"PM\"]; });\n\n\nglobal.PM = _PM_js__WEBPACK_IMPORTED_MODULE_0__[\"PM\"];\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcG0vaW5kZXguanM/NGUxNyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJQTSJdLCJtYXBwaW5ncyI6IkFBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBQSxNQUFNLENBQUNDLEVBQVAsR0FBWUEseUNBQVoiLCJmaWxlIjoiLi9zcmMvcG0vaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgUE0gfSBmcm9tICcuL1BNLmpzJztcclxuXHJcblxyXG5nbG9iYWwuUE0gPSBQTTtcclxuXHJcblxyXG5leHBvcnQge1BNfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pm/index.js\n");

/***/ }),

/***/ "./src/pm/instance/MeshCombined.js":
/*!*****************************************!*\
  !*** ./src/pm/instance/MeshCombined.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MeshCombined; });\n/**\r\n  var material = new Material({map:wood})\r\n  var table = new MeshCombined(\r\n    [\r\n      Mesh(legGeom,material ),\r\n      Mesh(legGeom,material ),\r\n      Mesh(legGeom,material ),\r\n      Mesh(legGeom,material ),\r\n      Mesh(boardGeom,material)\r\n    ],\r\n    mergeOrInstance //either merges everything together, or returns an autoinstanced mesh of legs, and regular mesh board\r\n)\r\n//Then the wrapper would have to be computed when the geometries are there.\r\n*/\nfunction MeshCombined(meshes) {\n  THREE.Group.call(this);\n  this.type = 'MeshCombined';\n  this._meshes = meshes;\n  this._ready = false;\n  this.init();\n}\nMeshCombined.prototype = Object.create(THREE.Group.prototype);\nMeshCombined.constructor = MeshCombined;\nObject.defineProperties(MeshCombined.prototype, {});\n\nMeshCombined.prototype.canAnalyze = function () {\n  // test somehow that the geometries are there?\n  // should also include materials?\n  return this._meshes.reduce(function (acc, val) {\n    return acc && val.geometry;\n  }, true);\n};\n\nMeshCombined.prototype._getMaterialKey = function (mesh) {\n  // should do some kind of complex check to compare types\n  // and maps, if the maps are different should not batch\n  return mesh.material.uuid;\n};\n\nMeshCombined.prototype.init = function () {\n  //console.time('init');\n  var _this2 = this;\n\n  if (this._ready || !this.canAnalyze) return false;\n  var res = [];\n  var byGeometry = {};\n  var byMaterial = {};\n\n  this._meshes.forEach(function (mesh) {\n    var geomKey = mesh.geometry.uuid;\n\n    if (!byGeometry[geomKey]) {\n      byGeometry[geomKey] = [];\n    }\n\n    byGeometry[geomKey].push(mesh); // leg: [m1,m2,m3,m4] board: [m5]\n  });\n\n  Object.keys(byGeometry).forEach(function (geomKey) {\n    // go through groups, this is for sure going to create different instances\n    var group = byGeometry[geomKey];\n    var geometry = group[0].geometry;\n\n    if (group.length === 1) {\n      res.push(group[0]); // Mesh(boardGeom)\n\n      return;\n    }\n\n    var materialMap = {};\n    group.forEach(function (mesh) {\n      var materialKey = _this2._getMaterialKey(mesh);\n\n      if (!materialMap[materialKey]) {\n        materialMap[materialKey] = [];\n      }\n\n      materialMap[materialKey].push(mesh);\n    });\n    Object.keys(materialMap).forEach(function (materialKey) {\n      var materialGroup = materialMap[materialKey];\n      var material = materialGroup[0].material;\n      var numInstances = materialGroup.length;\n      var instance = new THREE.InstancedMesh(geometry, material.clone(), numInstances);\n      res.push(instance);\n      materialGroup.forEach(function (mesh, i) {\n        instance.setQuaternionAt(i, mesh.quaternion);\n        instance.setPositionAt(i, mesh.position);\n        instance.setScaleAt(i, mesh.scale);\n      });\n      instance.needsUpdate();\n    });\n  });\n  res.forEach(function (obj) {\n    return _this2.add(obj);\n  }); //console.timeEnd('init')\n\n  return true;\n}; ///////////////////////////////////////////////\n// depth mat\n\n\nvar DEPTH_MATERIAL = new THREE.MeshDepthMaterial();\nDEPTH_MATERIAL.depthPacking = THREE.RGBADepthPacking;\nDEPTH_MATERIAL.clipping = true;\nDEPTH_MATERIAL.defines = {\n  INSTANCE_TRANSFORM: ''\n}; // distance mat\n\nvar DISTANCE_SHADER = THREE.ShaderLib['distanceRGBA'];\nvar DISTANCE_UNIFORMS = THREE.UniformsUtils.clone(DISTANCE_SHADER.uniforms);\nvar DISTANCE_DEFINES = {\n  'USE_SHADOWMAP': '',\n  'INSTANCE_TRANSFORM': ''\n};\nvar DISTANCE_MATERIAL = new THREE.ShaderMaterial({\n  defines: DISTANCE_DEFINES,\n  uniforms: DISTANCE_UNIFORMS,\n  vertexShader: DISTANCE_SHADER.vertexShader,\n  fragmentShader: DISTANCE_SHADER.fragmentShader,\n  clipping: true\n});\n\nTHREE.InstancedMesh = function (bufferGeometry, material, numInstances) {\n  THREE.Mesh.call(this, new InstancedGeom().setGeometry(bufferGeometry), material);\n  var self = this;\n  this.type = 'InstancedMesh';\n  this.numInstances = numInstances || 1; // make it work with depth effects\n\n  this.customDepthMaterial = DEPTH_MATERIAL;\n  this.customDistanceMaterial = DISTANCE_MATERIAL;\n\n  this.onAfterRender = function (renderer, scene, camera, geometry, material, group) {\n    self.geometry.update(camera);\n  }; // var deb = new InstancedMeshDebug(this);\n\n};\n\nTHREE.InstancedMesh.prototype = Object.create(THREE.Mesh.prototype);\nTHREE.InstancedMesh.constructor = THREE.InstancedMesh;\nObject.defineProperties(THREE.InstancedMesh.prototype, {\n  'material': {\n    set: function set(m) {\n      this._material = m;\n      this._material.defines = this._material.defines || {};\n      this._material.defines.INSTANCE_TRANSFORM = ''; // this._material.defines.INSTANCE_UNIFORM = '';\n\n      this._material.needsUpdate = true;\n    },\n    get: function get() {\n      return this._material;\n    }\n  },\n  'geometry': {\n    set: function set(g) {\n      if (g instanceof InstancedGeom) {\n        this._geometry = g;\n      } else {\n        // bufferGeometry\n        this._geometry.setGeometry(g);\n      }\n    },\n    get: function get() {\n      return this._geometry;\n    }\n  },\n  'numInstances': {\n    set: function set(v) {\n      this._numInstances = v;\n      this.geometry.setCount(this.numInstances);\n    },\n    get: function get() {\n      return this._numInstances;\n    }\n  }\n});\n\nTHREE.InstancedMesh.prototype.setPositionAt = function (index, position) {\n  this.geometry.setPositionAt(index, position);\n};\n\nTHREE.InstancedMesh.prototype.setQuaternionAt = function (index, quat) {\n  this.geometry.setQuaternionAt(index, quat);\n};\n\nTHREE.InstancedMesh.prototype.setScaleAt = function (index, scale) {\n  this.geometry.setScaleAt(index, scale);\n};\n\nTHREE.InstancedMesh.prototype.getPositionAt = function (index, position) {\n  return this.geometry.getPositionAt(index, position);\n};\n\nTHREE.InstancedMesh.prototype.getQuaternionAt = function (index, quat) {\n  return this.geometry.getQuaternionAt(index, quat);\n};\n\nTHREE.InstancedMesh.prototype.getScaleAt = function (index, scale) {\n  return this.geometry.getScaleAt(index, scale);\n};\n\nTHREE.InstancedMesh.prototype.needsUpdate = function () {\n  this.geometry.needsUpdate = true;\n  this.geometry.computeBoundingSphere();\n};\n\nfunction InstancedMeshDebug(im) {\n  var funOrigin = im.onAfterRender;\n  var box;\n  var helper;\n\n  im.onAfterRender = function (renderer, scene, camera, geometry, material, group) {\n    // console.time('update')\n    funOrigin(renderer, scene, camera, geometry, material, group); // console.timeEnd('update')\n    // console.log('count', this.geometry.maxInstancedCount);\n\n    clear();\n    var arr = im.geometry.arrTransformVisible;\n\n    for (var i = 0; i < arr.length; i++) {\n      box = arr[i].boundingBox;\n      helper = getHelper();\n      helper.scale.set(box.max.x - box.min.x, box.max.y - box.min.y, box.max.z - box.min.z); // helper.position.copy(box.max)\n\n      box.getCenter(helper.position);\n    }\n\n    box = im.geometry.boundingBox;\n    helper = getHelper();\n    helper.scale.set(box.max.x - box.min.x, box.max.y - box.min.y, box.max.z - box.min.z);\n    box.getCenter(helper.position);\n  };\n\n  var arr = [];\n\n  function getHelper() {\n    for (var i = 0; i < arr.length; i++) {\n      if (!arr[i].visible) {\n        arr[i].visible = true;\n        return arr[i];\n      }\n    }\n\n    var h = new THREE.Mesh(g, mat);\n    arr.push(h);\n    im.add(h);\n    return h;\n  }\n\n  function clear() {\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].visible = false;\n    }\n  }\n}\n\nvar g = new THREE.BoxBufferGeometry(1, 1, 1);\nvar mat = new THREE.MeshNormalMaterial({\n  wireframe: true\n}); //////////////////////////////////////////////\n\nfunction InstancedGeom() {\n  THREE.InstancedBufferGeometry.call(this);\n  this.count = 0;\n  var self = this;\n  this.boundOrigin = new THREE.Box3();\n  this.arrTransform = [];\n  this.gridTransform = new GridTransform(this.arrTransform);\n\n  this.setCount = function (count) {\n    this.count = count;\n\n    if ((this.maxInstancedCount || 0) < count) {\n      if (!this.attributes.instanceQuaternion || this.attributes.instanceQuaternion.count < count) {\n        var buffers = {\n          instanceQuaternion: new Float32Array(4 * count),\n          instancePosition: new Float32Array(3 * count),\n          instanceScale: new Float32Array(3 * count)\n        };\n        /*this.addAttribute('instanceQuaternion', new THREE.InstancedBufferAttribute(buffers.instanceQuaternion, 4));\r\n        this.addAttribute('instancePosition', new THREE.InstancedBufferAttribute(buffers.instancePosition, 3));\r\n        this.addAttribute('instanceScale', new THREE.InstancedBufferAttribute(buffers.instanceScale, 3));*/\n\n        this.setAttribute('instanceQuaternion', new THREE.InstancedBufferAttribute(buffers.instanceQuaternion, 4));\n        this.setAttribute('instancePosition', new THREE.InstancedBufferAttribute(buffers.instancePosition, 3));\n        this.setAttribute('instanceScale', new THREE.InstancedBufferAttribute(buffers.instanceScale, 3));\n        this.needsUpdate = true;\n      }\n    }\n\n    for (var i = 0; i < count; i++) {\n      this.arrTransform[i] = new Transform(this.boundOrigin);\n    }\n\n    this.maxInstancedCount = count;\n  };\n\n  this.setGeometry = function (bufferGeometry) {\n    this.copy(bufferGeometry);\n    this.boundOrigin.setFromBufferAttribute(this.attributes.position);\n    return this;\n  };\n\n  var frustum = new THREE.Frustum();\n  var projScreenMatrix = new THREE.Matrix4();\n  this.arrTransformVisible = [];\n\n  this.update = function (camera) {\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromMatrix(projScreenMatrix);\n    var visibleCount = 0; // for (var i = 0; i < this.arrTransform.length; i++) {\n    // \tif (frustum.intersectsBox(self.getBoundingBoxAt(i))) {\n    // \t\tvisibleCount++;\n    // \t\tthis.setTransformAt(visibleCount, this.arrTransform[i]);\n    // \t}\n    // }\n\n    this.arrTransformVisible = [];\n\n    for (var i = 0; i < this.gridTransform.arrGridIndex.length; i++) {\n      var grid = this.gridTransform.arrGridIndex[i];\n\n      if (frustum.intersectsBox(grid.boundingBox)) {\n        for (var j = 0; j < grid.arrTransform.length; j++) {\n          var t = grid.arrTransform[j];\n          this.arrTransformVisible.push(t);\n          this.setTransformAt(visibleCount++, t);\n        }\n      }\n    }\n\n    self.maxInstancedCount = visibleCount;\n    self.needsUpdate = true;\n  };\n\n  this.updateGrid = function () {\n    this.gridTransform.updateGrid();\n  };\n}\n\nInstancedGeom.prototype = Object.create(THREE.InstancedBufferGeometry.prototype);\nInstancedGeom.constructor = InstancedGeom;\n\nInstancedGeom.prototype.setTransformAt = function (index, t) {\n  this.attributes.instanceScale.setXYZ(index, t.s.x, t.s.y, t.s.z);\n  this.attributes.instancePosition.setXYZ(index, t.p.x, t.p.y, t.p.z);\n  this.attributes.instanceQuaternion.setXYZW(index, t.q.x, t.q.y, t.q.z, t.q.w);\n};\n\nInstancedGeom.prototype.setPositionAt = function (index, position) {\n  this.arrTransform[index].setP(position);\n  this.setTransformAt(index, this.arrTransform[index]);\n};\n\nInstancedGeom.prototype.setQuaternionAt = function (index, quat) {\n  this.arrTransform[index].setQ(quat);\n  this.setTransformAt(index, this.arrTransform[index]);\n};\n\nInstancedGeom.prototype.setScaleAt = function (index, scale) {\n  this.arrTransform[index].setS(scale);\n  this.setTransformAt(index, this.arrTransform[index]);\n};\n\nInstancedGeom.prototype.getPositionAt = function (index, position) {\n  return position ? position.copy(this.arrTransform[index].p) : this.arrTransform[index].p;\n};\n\nInstancedGeom.prototype.getQuaternionAt = function (index, quat) {\n  return quat ? quat.copy(this.arrTransform[index].q) : this.arrTransform[index].q;\n};\n\nInstancedGeom.prototype.getScaleAt = function (index, scale) {\n  return scale ? scale.copy(this.arrTransform[index].s) : this.arrTransform[index].s;\n};\n\nInstancedGeom.prototype.computeBoundingSphere = function () {\n  return function computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new THREE.Sphere();\n    }\n\n    this.computeBoundingBox();\n    this.boundingBox.getBoundingSphere(this.boundingSphere);\n    this.updateGrid();\n  };\n}();\n\nInstancedGeom.prototype.computeBoundingBox = function () {\n  return function () {\n    if (this.boundingBox === null) {\n      this.boundingBox = new THREE.Box3();\n    }\n\n    this.boundingBox.makeEmpty();\n\n    for (var i = 0, l = this.count; i < l; i++) {\n      this.boundingBox.union(this.getBoundingBoxAt(i));\n    }\n  };\n}();\n\nInstancedGeom.prototype.getBoundingBoxAt = function () {\n  return function (i) {\n    return this.arrTransform[i].boundingBox;\n  };\n}();\n\nObject.defineProperties(InstancedGeom.prototype, {\n  'needsUpdate': {\n    set: function set(v) {\n      this.attributes.instancePosition.needsUpdate = v;\n      this.attributes.instanceQuaternion.needsUpdate = v;\n      this.attributes.instanceScale.needsUpdate = v;\n    },\n    get: function get() {\n      return false;\n    }\n  }\n});\n\nfunction Transform(boundOrigin) {\n  this.boundOrigin = boundOrigin;\n  this._boundingBox = null;\n  this.p = new THREE.Vector3();\n  this.s = new THREE.Vector3(1, 1, 1);\n  this.q = new THREE.Quaternion();\n\n  this.setP = function (p) {\n    this.p.copy(p);\n  };\n\n  this.setS = function (s) {\n    this.s.copy(s);\n  };\n\n  this.setQ = function (q) {\n    this.q.copy(q);\n  };\n}\n\nTransform.prototype.computeBoundingBox = function () {\n  var m = new THREE.Matrix4();\n  return function () {\n    if (!this._boundingBox) {\n      this._boundingBox = new THREE.Box3();\n    }\n\n    m.compose(this.p, this.q, this.s);\n    this.boundingBox.copy(this.boundOrigin);\n    this.boundingBox.applyMatrix4(m);\n    return this.boundingBox;\n  };\n}();\n\nObject.defineProperties(Transform.prototype, {\n  'boundingBox': {\n    set: function set(v) {\n      this._boundingBox = v;\n    },\n    get: function get() {\n      return this._boundingBox || this.computeBoundingBox();\n    }\n  }\n});\n\nfunction GridTransform(arrTransform) {\n  var self = this;\n  this.arrTransform = arrTransform;\n  var size = 100;\n  this.arrGridIndex = [];\n  this.cache = {};\n\n  this.updateGrid = function () {\n    this.arrGridIndex.length = 0;\n    this.cache = {};\n\n    for (var i = 0; i < this.arrTransform.length; i++) {\n      var t = this.arrTransform[i];\n      var grid = getGridIndexFromPosition(t.p);\n      grid.arrTransform.push(t);\n    }\n\n    for (var key in this.cache) {\n      this.cache[key].computeBoundingBox();\n      this.arrGridIndex.push(this.cache[key]);\n    }\n  };\n\n  function getGridIndexFromPosition(pos) {\n    var x = Math.floor(pos.x / size);\n    var y = Math.floor(pos.y / size);\n    var z = Math.floor(pos.z / size);\n    var key = 'x' + x + 'y' + y + 'z' + z;\n\n    if (!self.cache[key]) {\n      self.cache[key] = new GridIndex();\n    }\n\n    return self.cache[key];\n  }\n}\n\nfunction GridIndex() {\n  this.arrTransform = [];\n  this._boundingBox = null;\n}\n\nGridIndex.prototype.computeBoundingBox = function () {\n  if (!this._boundingBox) {\n    this._boundingBox = new THREE.Box3();\n  }\n\n  this.boundingBox.makeEmpty();\n\n  for (var i = 0, l = this.arrTransform.length; i < l; i++) {\n    this.boundingBox.union(this.arrTransform[i].boundingBox);\n  }\n\n  return this.boundingBox;\n};\n\nObject.defineProperties(GridIndex.prototype, {\n  'boundingBox': {\n    set: function set(v) {\n      this._boundingBox = v;\n    },\n    get: function get() {\n      return this._boundingBox || this.computeBoundingBox();\n    }\n  }\n}); ///////////////////////////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n// transform vertices with the transform matrix\n\nvar ins_begin_vertex = ['#ifndef INSTANCE_TRANSFORM', 'vec3 transformed = vec3( position );', '#else', '#ifndef INSTANCE_MATRIX', 'mat4 _instanceMatrix = getInstanceMatrix();', '#define INSTANCE_MATRIX', '#endif', 'vec3 transformed = ( _instanceMatrix * vec4( position , 1. )).xyz;', '#endif'].join('\\n'); //////////////////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n// multiply the color with per instance color if enabled\n\nvar ins_color_fragment = ['#ifdef USE_COLOR', 'diffuseColor.rgb *= vColor;', '#endif', '#if defined(INSTANCE_COLOR)', 'diffuseColor.rgb *= vInstanceColor;', '#endif'].join('\\n'); ////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n// add fragment varying if feature enabled\n\nvar ins_color_pars_fragment = ['#ifdef USE_COLOR', 'varying vec3 vColor;', '#endif', '#if defined( INSTANCE_COLOR )', 'varying vec3 vInstanceColor;', '#endif'].join('\\n'); ///////////////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n// read per instance color from attribute, pass to varying\n\nvar ins_color_vertex = ['#ifdef USE_COLOR', 'vColor.xyz = color.xyz;', '#endif', '#if defined( INSTANCE_COLOR ) && defined( INSTANCE_TRANSFORM )', 'vInstanceColor = instanceColor;', '#endif'].join('\\n'); ///////////////////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n\nvar ins_defaultnormal_vertex = ['#ifdef FLIP_SIDED', 'objectNormal = -objectNormal;', '#endif', '#ifndef INSTANCE_TRANSFORM', 'vec3 transformedNormal = normalMatrix * objectNormal;', '#else', '#ifndef INSTANCE_MATRIX ', 'mat4 _instanceMatrix = getInstanceMatrix();', '#define INSTANCE_MATRIX', '#endif', '#ifndef INSTANCE_UNIFORM', 'vec3 transformedNormal =  transposeMat3( inverse( mat3( modelViewMatrix * _instanceMatrix ) ) ) * objectNormal ;', '#else', 'vec3 transformedNormal = ( modelViewMatrix * _instanceMatrix * vec4( objectNormal , 0.0 ) ).xyz;', '#endif', '#endif'].join('\\n'); //////////////////////////////////////\n\n/**************************\r\n * Dusan Bosnjak @pailhead\r\n **************************/\n\nvar ins_uv_pars_vertex = ['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )', 'varying vec2 vUv;', 'uniform mat3 uvTransform;', '#endif', '#ifdef INSTANCE_TRANSFORM', 'mat3 inverse(mat3 m) {', 'float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];', 'float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];', 'float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];', 'float b01 = a22 * a11 - a12 * a21;', 'float b11 = -a22 * a10 + a12 * a20;', 'float b21 = a21 * a10 - a11 * a20;', 'float det = a00 * b01 + a01 * b11 + a02 * b21;', 'return mat3(b01, (-a22 * a01 + a02 * a21), ( a12 * a01 - a02 * a11),', 'b11, ( a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),', 'b21, (-a21 * a00 + a01 * a20), ( a11 * a00 - a01 * a10)) / det;', '}', // for dynamic, avoid computing the matrices on the cpu\n'attribute vec3 instancePosition;', 'attribute vec4 instanceQuaternion;', 'attribute vec3 instanceScale;', '#if defined( INSTANCE_COLOR )', 'attribute vec3 instanceColor;', 'varying vec3 vInstanceColor;', '#endif', 'mat4 getInstanceMatrix(){', 'vec4 q = instanceQuaternion;', 'vec3 s = instanceScale;', 'vec3 v = instancePosition;', 'vec3 q2 = q.xyz + q.xyz;', 'vec3 a = q.xxx * q2.xyz;', 'vec3 b = q.yyz * q2.yzz;', 'vec3 c = q.www * q2.xyz;', 'vec3 r0 = vec3( 1.0 - (b.x + b.z) , a.y + c.z , a.z - c.y ) * s.xxx;', 'vec3 r1 = vec3( a.y - c.z , 1.0 - (a.x + b.z) , b.y + c.x ) * s.yyy;', 'vec3 r2 = vec3( a.z + c.y , b.y - c.x , 1.0 - (a.x + b.x) ) * s.zzz;', 'return mat4(', 'r0 , 0.0,', 'r1 , 0.0,', 'r2 , 0.0,', 'v  , 1.0', ');', '}', '#endif'].join('\\n'); ////////////////////////////\n// исправляет эти методы и блоки шейдеров с необходимой логикой для инстансов\n\nTHREE.ShaderChunk['begin_vertex'] = ins_begin_vertex;\nTHREE.ShaderChunk['color_fragment'] = ins_color_fragment;\nTHREE.ShaderChunk['color_pars_fragment'] = ins_color_pars_fragment;\nTHREE.ShaderChunk['color_vertex'] = ins_color_vertex;\nTHREE.ShaderChunk['defaultnormal_vertex'] = ins_defaultnormal_vertex;\nTHREE.ShaderChunk['uv_pars_vertex'] = ins_uv_pars_vertex;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pm/instance/MeshCombined.js\n");

/***/ })

/******/ });